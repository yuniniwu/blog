{"version":3,"sources":["constants/style.js","components/App/MessageBoard.js","index.js"],"names":["GlobalStyle","createGlobalStyle","API_ENDPOINT","Container","styled","div","Title","h1","MessageForm","MessageNickName","input","MessageTextArea","textarea","SubmitButton","button","MessageList","MessageContainer","MessageHeader","Author","p","MessageTime","MessageBody","ErrorMessage","MessageItem","children","author","time","Loading","MessageBoard","useState","messages","setMessages","messageApiError","setMessageApiError","nickname","body","value","setValue","postMessageError","setPostMessageError","isLoadingPostMessage","setIsLoadingPostMessage","fetchMessages","fetch","then","response","json","data","catch","err","message","handleInputChange","e","changedValue","target","name","handleInputFocus","useEffect","onChange","onFocus","rows","onClick","preventDefault","method","headers","JSON","stringify","res","ok","toString","length","map","Date","createdAt","toLocaleString","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d834b17f.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n/*\n  CSS reset \n  http://meyerweb.com/eric/tools/css/reset/ \n  v2.0 | 20110126\n  License: none (public domain)\n*/\n  html,\n  body,\n  div,\n  span,\n  applet,\n  object,\n  iframe,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  blockquote,\n  pre,\n  a,\n  abbr,\n  acronym,\n  address,\n  big,\n  cite,\n  code,\n  del,\n  dfn,\n  em,\n  img,\n  ins,\n  kbd,\n  q,\n  s,\n  samp,\n  small,\n  strike,\n  strong,\n  sub,\n  sup,\n  tt,\n  var,\n  b,\n  u,\n  i,\n  center,\n  dl,\n  dt,\n  dd,\n  ol,\n  ul,\n  li,\n  fieldset,\n  form,\n  label,\n  legend,\n  table,\n  caption,\n  tbody,\n  tfoot,\n  thead,\n  tr,\n  th,\n  td,\n  article,\n  aside,\n  canvas,\n  details,\n  embed,\n  figure,\n  figcaption,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  output,\n  ruby,\n  section,\n  summary,\n  time,\n  mark,\n  audio,\n  video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article,\n  aside,\n  details,\n  figcaption,\n  figure,\n  footer,\n  header,\n  hgroup,\n  menu,\n  nav,\n  section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol,\n  ul {\n    list-style: none;\n  }\n  blockquote,\n  q {\n    quotes: none;\n  }\n  blockquote:before,\n  blockquote:after,\n  q:before,\n  q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  \n  /* below is not part of css reset */\n  body {\n    background-color: #e2e1e1;\n  }\n`;\n\nexport default GlobalStyle;\n\nexport const MEDIA_QUERY_MD = '@media screen and (max-width: 768px)';\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport GlobalStyle from '../../constants/style.js';\nimport PropTypes from 'prop-types';\n\nconst API_ENDPOINT = 'https://student-json-api.lidemy.me/comments';\n\nconst Container = styled.div`\n  max-width: 480px;\n  margin: 0 auto;\n  padding: 30px;\n  font-size: 1rem;\n`;\nconst Title = styled.h1`\n  font-size: 2rem;\n  font-weight: bold;\n  text-align: center;\n`;\n\nconst MessageForm = styled.div`\n  margin: 10px;\n`;\n\nconst MessageNickName = styled.input`\n  margin-bottom: 10px;\n`;\nconst MessageTextArea = styled.textarea`\n  display: block;\n  width: 100%;\n`;\nconst SubmitButton = styled.button`\n  margin-top: 8px;\n  font-size: 1rem;\n`;\n\nconst MessageList = styled.div`\n  margin: 10px;\n`;\n\nconst MessageContainer = styled.div`\n  padding: 20px;\n\n  & + & {\n    border-top: 1px solid black;\n  }\n`;\nconst MessageHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-bottom: 10px;\n  border-bottom: 1px solid gray;\n`;\nconst Author = styled.p``;\nconst MessageTime = styled.p``;\n\nconst MessageBody = styled.p`\n  margin-top: 10px;\n`;\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nfunction MessageItem({ children, author, time }) {\n  return (\n    <MessageContainer>\n      <MessageHeader>\n        <Author>{author}</Author>\n        <MessageTime>{time}</MessageTime>\n      </MessageHeader>\n      <MessageBody children={children} />\n    </MessageContainer>\n  );\n}\n\nMessageItem.propTypes = {\n  children: PropTypes.node,\n  author: PropTypes.string,\n  time: PropTypes.string,\n};\n\nconst Loading = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  font-size: 2rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default function MessageBoard() {\n  const [messages, setMessages] = useState(null);\n  const [messageApiError, setMessageApiError] = useState(null);\n  const [value, setValue] = useState({ nickname: '', body: '' });\n  const [postMessageError, setPostMessageError] = useState();\n  const [isLoadingPostMessage, setIsLoadingPostMessage] = useState(false);\n\n  const { nickname, body } = value;\n\n  const fetchMessages = () => {\n    return fetch(API_ENDPOINT + '?_sort=createdAt&_order=desc')\n      .then((response) => response.json())\n      .then((data) => {\n        setMessages(data);\n      })\n      .catch((err) => {\n        setMessageApiError(err.message);\n      });\n  };\n\n  const handleInputChange = (e) => {\n    const changedValue = e.target.value;\n    const name = e.target.name;\n    setValue({ ...value, [name]: changedValue });\n  };\n\n  const handleInputFocus = () => {\n    setPostMessageError(null);\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if (isLoadingPostMessage) return;\n    setIsLoadingPostMessage(true);\n\n    fetch(API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(value),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setIsLoadingPostMessage(false);\n        // 如果 fetch 拿到的資料有問題的話\n        if (data.ok === 0) {\n          setPostMessageError(data.message);\n          return;\n        }\n        setValue({ nickname: '', body: '' });\n        fetchMessages();\n      })\n      .catch((err) => {\n        setIsLoadingPostMessage(false);\n        setPostMessageError(err.message);\n      });\n  };\n\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        {isLoadingPostMessage && <Loading children={'loading...'} />}\n        <Title>留言板</Title>\n        <MessageForm>\n          暱稱：\n          <MessageNickName\n            name={'nickname'}\n            value={nickname}\n            onChange={handleInputChange}\n            onFocus={handleInputFocus}\n          />\n          <MessageTextArea\n            name={'body'}\n            value={body}\n            onChange={handleInputChange}\n            onFocus={handleInputFocus}\n            rows={10}\n          ></MessageTextArea>\n          <SubmitButton onClick={handleFormSubmit}>送出</SubmitButton>\n          {postMessageError && <ErrorMessage>{postMessageError}</ErrorMessage>}\n        </MessageForm>\n        {messageApiError && (\n          <ErrorMessage>\n            something went wrong. {messageApiError.toString()}\n          </ErrorMessage>\n        )}\n        {messages && messages.length === 0 && (\n          <ErrorMessage>No message fetched</ErrorMessage>\n        )}\n        <MessageList>\n          {messages &&\n            messages.map((message) => (\n              <MessageItem\n                key={message.id}\n                children={message.body}\n                author={message.nickname}\n                time={new Date(message.createdAt).toLocaleString()}\n              />\n            ))}\n        </MessageList>\n      </Container>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MessageBoard from './components/App/MessageBoard';\n\nReactDOM.render(<MessageBoard />, document.getElementById('root'));\n"],"sourceRoot":""}